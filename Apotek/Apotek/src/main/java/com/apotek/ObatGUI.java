/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.apotek;

import entitas.Database;
import entitas.Obat;
import entitas.Cair;
import entitas.Padat;
import java.awt.HeadlessException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACER TRAVELMATE
 */
public class ObatGUI extends javax.swing.JFrame {
    private Database db;
    /**
     * Creates new form Obat
     */
    private void populateTable() {
       DefaultTableModel model = (DefaultTableModel) tblApoteker.getModel();
       model.setRowCount(0);
       model.setColumnIdentifiers(new Object[]{"ID Obat", "Nama", "Stok", "Tgl. Kadaluarsa", "Jenis Obat", "Bentuk", "Takaran/Isi"});

       try {
           Database db = new Database();
           db.openConnection();
           db.statement = db.connection.createStatement();

           String query = "SELECT obat.ID_Obat, obat.Nama_Obat, obat.Stok, obat.Tanggal_Kadaluarsa, padat.Bentuk, cair.Ml " +
                          "FROM obat " +
                          "LEFT JOIN padat ON obat.ID_Obat = padat.ID_Obat " +
                          "LEFT JOIN cair ON obat.ID_Obat = cair.ID_Obat";

           ResultSet resultSet = db.statement.executeQuery(query);

           while (resultSet.next()) {
               int id = resultSet.getInt("ID_Obat");
               String nama = resultSet.getString("Nama_Obat");
               String stok = resultSet.getString("Stok");
               String tglKadaluarsa = resultSet.getString("Tanggal_Kadaluarsa");
               String jenisObat = "";
               String bentukObat = "-";
               String takaranIsi = "-";

               if (resultSet.getString("Bentuk") != null) {
                   jenisObat = "Padat";
                   bentukObat = resultSet.getString("Bentuk");
               } else if (resultSet.getString("Ml") != null) {
                   jenisObat = "Cair";
                   takaranIsi = resultSet.getString("Ml") + " mL";
               }

               model.addRow(new Object[]{id, nama, stok, tglKadaluarsa, jenisObat, bentukObat, takaranIsi});
           }

           resultSet.close();
       } catch (SQLException ex) {
           ex.printStackTrace();

       } 
   }
    
    public class DateValidator {
        public static boolean isValidDateFormat(String date, String format) {
            SimpleDateFormat sdf = new SimpleDateFormat(format);
            sdf.setLenient(false); // Non-lenient parsing

            try {
                Date parsedDate = sdf.parse(date);
                return date.equals(sdf.format(parsedDate)); // Ensure the date is exactly the same as input
            } catch (ParseException e) {
                return false;
            }
        }
    }

    private boolean isIdDuplicate(String id) {
        try {
            Database db = new Database();
            db.openConnection();
            db.statement = db.connection.createStatement();

            String query = "SELECT * FROM obat WHERE id_obat = " + id;
            ResultSet resultSet = db.statement.executeQuery(query);

            return resultSet.next(); // Mengembalikan true jika ID sudah ada, false jika belum ada

        } catch (SQLException ex) {
            ex.printStackTrace();
            // Handle exceptions
        }
        return false;
    }
    
    private boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private void clearFields() {
        txtID.setText("");
        txtNAMA.setText("");
        SPNstok.setValue(0);
        txtTGL.setText("");
        txtTakaran.setText("");
        txtIDApt.setText("");
        CMBjenis.setSelectedIndex(0);
        BentukPadat.setSelectedIndex(0);
        BentukPadat.setVisible(false);
        txtTakaran.setVisible(false);
    }
    
    public ObatGUI() {
        initComponents();
        Takaran.setVisible(false);
        txtTakaran.setVisible(false);
        BentukPadat.setVisible(false);
        Bentuk.setVisible(false);
        SpinnerModel stokModel = new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1);
        SPNstok.setModel(stokModel);
        populateTable();
        clearFields();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtEMAIL = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblApoteker = new javax.swing.JTable();
        btnHapus = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnTambah = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtNAMA = new javax.swing.JTextField();
        txtID = new javax.swing.JTextField();
        txtTGL = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CMBjenis = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        SPNstok = new javax.swing.JSpinner();
        Kembali = new javax.swing.JButton();
        BentukPadat = new javax.swing.JComboBox<>();
        Bentuk = new javax.swing.JLabel();
        Takaran = new javax.swing.JLabel();
        txtTakaran = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtIDApt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblApoteker.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblApoteker);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, 600, 110));

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });
        getContentPane().add(btnHapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 260, -1, -1));

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        getContentPane().add(btnEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 260, 60, -1));

        btnTambah.setText("Tambah Data");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });
        getContentPane().add(btnTambah, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 260, -1, -1));

        jLabel4.setText("Nama");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, -1, 20));

        txtNAMA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNAMAActionPerformed(evt);
            }
        });
        getContentPane().add(txtNAMA, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 170, 130, -1));

        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });
        getContentPane().add(txtID, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 140, 130, -1));
        getContentPane().add(txtTGL, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, 140, -1));

        jLabel5.setText("Stok");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 230, 70, 20));

        jLabel6.setText("Tgl. Kadaluarsa");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 140, 90, 20));

        jLabel3.setText("ID Obat");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, -1, 20));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setText("Data Obat");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 50, 190, 90));

        CMBjenis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Padat", "Cair" }));
        CMBjenis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMBjenisActionPerformed(evt);
            }
        });
        getContentPane().add(CMBjenis, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 170, -1, -1));

        jLabel7.setText("Jenis");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, -1, -1));
        getContentPane().add(SPNstok, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 230, 50, -1));

        Kembali.setText("Kembali");
        Kembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KembaliActionPerformed(evt);
            }
        });
        getContentPane().add(Kembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 410, -1, -1));

        BentukPadat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tablet", "Kapsul", "Serbuk", " " }));
        BentukPadat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BentukPadatActionPerformed(evt);
            }
        });
        getContentPane().add(BentukPadat, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 200, -1, -1));

        Bentuk.setText("Bentuk");
        getContentPane().add(Bentuk, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 200, -1, -1));

        Takaran.setText("Takaran");
        getContentPane().add(Takaran, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 200, -1, -1));
        getContentPane().add(txtTakaran, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 200, 140, -1));

        jLabel8.setText("ID Apoteker");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, -1, -1));

        txtIDApt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDAptActionPerformed(evt);
            }
        });
        getContentPane().add(txtIDApt, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 200, 130, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/curd.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 500));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    private void CMBjenisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMBjenisActionPerformed
        // TODO add your handling code here:
        String selectedJenis = CMBjenis.getSelectedItem().toString();

    if ("Padat".equals(selectedJenis)) {
        BentukPadat.setVisible(true);
        Bentuk.setVisible(true);
        Takaran.setVisible(false);
        txtTakaran.setVisible(false);
    } else if ("Cair".equals(selectedJenis)) {
        BentukPadat.setVisible(false);
        Bentuk.setVisible(false);
        Takaran.setVisible(true);
        txtTakaran.setVisible(true);
    } else {
        BentukPadat.setVisible(false);
        Bentuk.setVisible(false);
        Takaran.setVisible(false);
        txtTakaran.setVisible(false);
    }

    }//GEN-LAST:event_CMBjenisActionPerformed

    private void KembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KembaliActionPerformed
        // TODO add your handling code here:
        this.dispose(); // Menutup jendela login
        MenuApotekerGUI mainMenu = new MenuApotekerGUI();
        mainMenu.setVisible(true);
    }//GEN-LAST:event_KembaliActionPerformed

    private void BentukPadatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BentukPadatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BentukPadatActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        String id_obat = txtID.getText();
        String nama = txtNAMA.getText();
        String stok = SPNstok.getValue().toString();
        String tanggal = txtTGL.getText();
        String jenis = CMBjenis.getSelectedItem().toString();
        String bentuk = BentukPadat.getSelectedItem().toString();
        String mL = txtTakaran.getText();
        String id_apt = txtIDApt.getText();

        // Validasi input, pastikan tidak ada input yang kosong
        if (id_obat.isEmpty() || nama.isEmpty() || stok.isEmpty() || tanggal.isEmpty() || jenis.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!DateValidator.isValidDateFormat(tanggal, "dd-MM-yy")) {
            JOptionPane.showMessageDialog(this, "Format tanggal tidak valid. Gunakan format dd-MM-yy", "Kesalahan", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!isInteger(id_obat)) {
            JOptionPane.showMessageDialog(this, "ID harus berupa angka.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (isIdDuplicate(id_obat)) {
            JOptionPane.showMessageDialog(this, "ID sudah ada dalam database.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int id = Integer.parseInt(id_obat);
            // Buat objek ObatGUI dan isi dengan data yang diambil dari GUI
            Obat obat = new Obat();
            Padat padat = new Padat();
            Cair cair = new Cair();
            obat.id = id;
            obat.nama_obat = nama;
            obat.stok = stok;
            obat.tanggal_kadaluarsa = tanggal;
            obat.apoteker_id_apoteker = id_apt;
            padat.id = id;
            padat.bentuk = bentuk;
            cair.id = id;
            cair.mL = mL;

            // Tambahkan data ke database berdasarkan jenis
            if ("Padat".equals(jenis)) {
                if (obat.create() && padat.create()) {
                    JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    // Bersihkan input setelah berhasil menambahkan data
                    clearFields();
                    populateTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal menambahkan data.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                }
            } else if ("Cair".equals(jenis)) {
                if (obat.create() && cair.create()) {
                    JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    // Bersihkan input setelah berhasil menambahkan data
                    clearFields();
                    populateTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal menambahkan data.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (HeadlessException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + ex.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnTambahActionPerformed

    private void txtNAMAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNAMAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNAMAActionPerformed

    private void txtIDAptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDAptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDAptActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        String id_obat = txtID.getText();
        String nama = txtNAMA.getText();
        String stok = SPNstok.getValue().toString();
        String tanggal = txtTGL.getText();
        String jenis = CMBjenis.getSelectedItem().toString();
        String bentuk = BentukPadat.getSelectedItem().toString();
        String mL = txtTakaran.getText();
        String id_apt = txtIDApt.getText();
        
        // Validasi input, pastikan tidak ada input yang kosong
        if (id_obat.isEmpty() || nama.isEmpty() || stok.isEmpty() || tanggal.isEmpty() || jenis.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!isInteger(id_obat)) {
            JOptionPane.showMessageDialog(this, "ID harus berupa angka.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!isInteger(id_obat)) {
            JOptionPane.showMessageDialog(this, "ID harus berupa angka.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (isIdDuplicate(id_obat)) {
            JOptionPane.showMessageDialog(this, "ID sudah ada dalam database.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int id = Integer.parseInt(id_obat);
            // Buat objek ObatGUI dan isi dengan data yang diambil dari GUI
            Obat obat = new Obat();
            Padat padat = new Padat();
            Cair cair = new Cair();
            obat.id = id;
            obat.nama_obat = nama;
            obat.stok = stok;
            obat.tanggal_kadaluarsa = tanggal;
            obat.apoteker_id_apoteker = id_apt;
            padat.id = id;
            padat.bentuk = bentuk;
            cair.id = id;
            cair.mL = mL;
            
            if ("Padat".equals(jenis)){
                cair.delete(id);
                if (obat.update() && padat.create()) {
                    JOptionPane.showMessageDialog(this, "Data berhasil diupdate.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    // Bersihkan input setelah berhasil mengupdate data
                    clearFields();
                    populateTable();
                } else if(obat.update() && padat.update()){
                    JOptionPane.showMessageDialog(this, "Data berhasil diupdate.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    // Bersihkan input setelah berhasil mengupdate data
                    clearFields();
                    populateTable();                
                }else {
                    JOptionPane.showMessageDialog(this, "Gagal mengupdate data.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                        }
            }else if("Cair".equals(jenis)){
                padat.delete(id);
                if (obat.update() && cair.create()) {
                    JOptionPane.showMessageDialog(this, "Data berhasil diupdate.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    // Bersihkan input setelah berhasil mengupdate data
                    clearFields();
                    populateTable();
                } else if(obat.update() && cair.update()){
                    JOptionPane.showMessageDialog(this, "Data berhasil diupdate.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    // Bersihkan input setelah berhasil mengupdate data
                    clearFields();
                    populateTable();                
                }else {
                    JOptionPane.showMessageDialog(this, "Gagal mengupdate data.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                        }
            }
        } catch (HeadlessException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + ex.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        String id_obat = txtID.getText();

        if (id_obat.isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID Obat harus diisi.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
            }
        if (!isInteger(id_obat)) {
                JOptionPane.showMessageDialog(this, "ID harus berupa angka.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }

        try {
            int id = Integer.parseInt(id_obat);
            Obat obat = new Obat();
            Cair cair = new Cair();
            Padat padat = new Padat();
            boolean deleted = obat.delete(id);
            cair.delete(id);
            padat.delete(id);
            if (deleted) {
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "Gagal menghapus data.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
            }
            populateTable();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID harus berupa angka.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnHapusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ObatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ObatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ObatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ObatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ObatGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Bentuk;
    private javax.swing.JComboBox<String> BentukPadat;
    private javax.swing.JComboBox<String> CMBjenis;
    private javax.swing.JButton Kembali;
    private javax.swing.JSpinner SPNstok;
    private javax.swing.JLabel Takaran;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnTambah;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblApoteker;
    private javax.swing.JTextField txtEMAIL;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtIDApt;
    private javax.swing.JTextField txtNAMA;
    private javax.swing.JTextField txtTGL;
    private javax.swing.JTextField txtTakaran;
    // End of variables declaration//GEN-END:variables
}
